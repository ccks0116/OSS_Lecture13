// project.cpp : 콘솔 응용 프로그램에 대한 진입점을 정의합니다.
//

#include "stdafx.h"
#include "stdlib.h"
#include "windows.h"//Sleep(), Beep()를 사용하기위한 헤더파일
#include "time.h"
#include "conio.h" //_kbhit(),getch()

typedef struct SaveTime {  //구조체단위로 파일입출력함
	time_t date;
	int elpTime;
}saveTime;

int c = 0; //clock()로 받은 값을 저장
int m = 0, h = 0; // 경괴시간 분, 시
int state = NULL; // 키입력 상태
int endProgram = 1; //프로그램 종료
int alarm = 3600;// 초로 환산한 알람시간

#define ESC 27

void elpTime();
void pTime();
void keyListener();
void setAlarm();
void writeData();
void readData(saveTime *arr, int arrSize);
void statistics();
void checkElpTime();

int main()
{
	system("mode con:cols=20 lines=5");// con:cols=50 : 가로 길 lines=20 : 세로 길

	while (endProgram) {
		system("cls");
		keyListener();
		elpTime();
		pTime();
		printf("0 도움말, ESC 종료.\n");
		Sleep(50);
	}

	writeData(); //시간값 저장
	return 0;
}

void elpTime() {		//elapse time 경과시간
	c = clock() / 1000; //clock()는 1/1000초를 반환하므로 1초로 단위 변경
	m = (c / 60) % 60;
	h = c / 3600;
	if ((c % alarm) == 0) { //알람시간이 되면 비프음 출력
		printf("아무키 입력시 종료\n");
		for (int i = 0; i < 5; i++){
			Beep(262, 100);
			Beep(330, 100);
			Beep(392, 100);
			Beep(524, 100);
			if (_kbhit() != 0) {
				break;
			}
		}
	}

	printf("경과시간 %.2d:%.2d\n", h, m);

}

void pTime() {	//present time 현재시간
	struct tm *t;
	time_t timer;
	timer = time(NULL);
	t = localtime(&timer);
	printf("현재시간 %.2d:%.2d\n", t->tm_hour, t->tm_min);
}

void keyListener() {
	if (_kbhit() != 0) //키보드 버퍼값이 있으면 반복문을 빠져나옴
	{
		state = getch();
		switch (state) {
		case ESC:
			printf("종료합니다.\n");
			endProgram = 0;
			break;
		case '0':
			system("mode con:cols=50 lines=20");
			printf("1. 알람시간 설정\n2. 사용량 통계\n3. 컴퓨터 사용량 확인\nESC. 이전\n");
			state = getch();
			switch (state) {
			case ESC:
				break;
			case '1':
				setAlarm();
				break;
			case '2':
				statistics();
				break;
			case '3':
				checkElpTime();
				break;
			}
			system("mode con:cols=20 lines=5");
			break;
		}
	}

}

void setAlarm() {
	int alarmH = 0, alarmM = 01; // 알람시간 시, 분
	system("cls");
	printf("알람 설정 메뉴입니다.(기본 1시간마다 알람)\n");
	printf("----------------------\n");
	while (1){
		while (1){  //알람 시 설정
			printf("시간을 설정해 주십시오( 0 ~ 24 )\n");
			scanf("%d", &alarmH);
			if (alarmH > 24) {
				printf("24시를 넘을 수 없습니다.\n");
				continue;
			}
			break;
		}
		while (1){ // 알람 분 설정
			printf("분을 설정해 주십시오( 0 ~ 59 )\n");
			scanf("%d", &alarmM);
			if (alarmH > 59) {
				printf("59분를 넘을 수 없습니다.\n");
				continue;
			}
			break;
		}
		alarm = (alarmH * 3600) + (alarmM * 60); //시, 분을 초단위로 변환 하여 alarm에 저장
		if (alarm == 0) {  //0시 0분일 때를 방지
			printf("시간을 다시설정 하세요.\n");
			continue;
		}
		break;
	}

}

void writeData() { //시간 기록을 파일 입출력으로 저장
	FILE * fp;

	if ((fp = fopen("Log.txt", "a")) == NULL) {
		printf("파일을 열 수 없습니다.\n");
		return;
	}
	saveTime save; //구조체 단위로 저장하기위함 
	save.date = time(NULL); //saveTime 속성 double date
	save.elpTime = clock(); // int elaTime
	fwrite(&save, sizeof(saveTime), 1, fp);
	fclose(fp);
}

void readData(saveTime arr[], int arrSize) { //로그파일에서 시간을 읽어 배열에 저장
	FILE * fp;
	saveTime read;
	int i = 1, j = 0; //카운트 변수
	int time1 = 0, time2 = 0; //시간 비교를 위한 변수
	struct tm * t;
	system("cls");

	if ((fp = fopen("Log.txt", "r")) == NULL) {
		printf("파일을 열 수 없습니다.\n처음 실행 시켰다면 프로그램 종료후 로그파일이 생성됩니다\n");
		getch();
		return;
	}

	fseek(fp, -sizeof(saveTime), SEEK_END); //Log.txt의 제의 뒷부분부터 구조체saveTime 단위만큼 뒤로 건너뜀
	fread(&read, sizeof(saveTime), 1, fp);
	arr[j] = read;

	while (ftell(fp) != sizeof(saveTime)) {
		fseek(fp, -(i + 1)*sizeof(saveTime), SEEK_END); //Log.txt의 제의 뒷부분부터 구조체saveTime 단위만큼 뒤로 건너뜀
		fread(&read, sizeof(saveTime), 1, fp);
		t = localtime(&arr[j].date);	time1 = t->tm_min; //날짜비교를위세 각각변수에 저장 ////////////////////////분으로 바꿔놨음 나중에 날짜로 바꿔야됨///////////
		t = localtime(&read.date);		time2 = t->tm_min;
		if (j == arrSize) {					//배열을 넘어가면 종료
			break;
		}
		else if (time1 == time2) {  
			arr[j].elpTime += read.elpTime; //날짜가 같으면 사용시간을 더함
		}
		else {
			j = j + 1;
			arr[j] = read;//날짜가 다르면 다음배열에 저장
		}
		i++;
	}

}

void checkElpTime() {
	system("mode con:cols=50 lines=50");
	struct tm * t;
	saveTime arr[30] = { {} };
	printf("%--d\n", arr[0].date);
	readData(arr, sizeof(arr) / sizeof(saveTime));
	for (int i = 0; i < sizeof(arr) / sizeof(saveTime); i++) {
		if (arr[i].date == 0)
			break;
		t = localtime(&arr[i].date);
		printf("%2d일 사용시간 %6d\n", t->tm_min, arr[i].elpTime); //////////////////////////분으로 바꿔놨음 나중에 날짜로 바꿔야됨///////////
	}
	printf("아무키 입력시 종료\n");
	getch();
}

void statistics() { //사용시간을 통계내는 함수 간략화가 필요하다
	saveTime arr[7] = { {} };
	int sum = 0;
	readData(arr, sizeof(arr)/sizeof(saveTime));
	for (int i = 0; i < sizeof(arr) / sizeof(saveTime); i++) {
		sum += arr[i].elpTime;
	}
	printf("7일간 평균 사용량 = %d", sum / 7);
	printf("아무키 입력시 종료\n");
	getch();
}